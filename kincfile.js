const fs = require('fs');
const path = require("path");

function gen_push_line(append) {
	return append + "\n";
}

function getFileType(DirEnt_like)
{
	return DirEnt_like.name.split(".")[1];
}

function get_all_subdirectories(path_inc)
{
	let files = fs.readdirSync(path_inc, {withFileTypes: true});
	let directories = files.filter(file => file.isDirectory());
	let all_directories = [];
	if (directories.length > 0)
	{
		for (const directory of directories)
		{	
			all_directories.push(path_inc + directory.name + "/");
			all_directories = all_directories.concat(get_all_subdirectories(path_inc + directory.name + "/"));
		}
	}
	return all_directories;
}

//We'll use this format to write out all of our assets to file
//Same thing for sound, music, etc. 
//We'll need to expand this to handle recursive directories in images and sounds and such, maybe
if (fs.existsSync("Sources/assets/images/"))
{
	//First, acquire the pathnames to every single asset
	const basedir_path = ["Sources/assets/images/"];
	let subdir_paths = get_all_subdirectories("Sources/assets/images/");
	let all_paths = basedir_path.concat(subdir_paths); 

	let image_enums = [];
	let image_enum_names = [];
	let image_paths = [];
	let outwrite = "";

	for (const a_path of all_paths)
	{
		let directory_contents = fs.readdirSync(a_path, {withFileTypes: true});

		for (const file of directory_contents)
		{
			if (!file.isFile()) continue;

			let filetype = path.extname(file.name);
			if (filetype === ".png" || filetype === ".k")
			{	
				const base_file_path = a_path;
				const asset_string_path = "\"" + base_file_path.split("Sources/")[1] + file.name + "\"";
				const resource_relative_path = base_file_path.split("Sources/assets/images/")[1] + file.name;
				const enum_postfix = resource_relative_path.replace(/\//g, "_").toUpperCase().split(".")[0];

				image_paths.push(asset_string_path);
				image_enums.push("TEC_IMAGE_RESOURCE_" + enum_postfix);
				image_enum_names.push("\"" + "TEC_IMAGE_RESOURCE_" + enum_postfix + "\"")
			}
		}
	}
	// if (!file.isFile()) continue;

	// let filetype = path.extname(file.name);
	// if (filetype === ".png" || filetype === ".k")
	// {
	// 	const prefix = path.basename(file.name, filetype).toUpperCase();
	// 	image_enums.push("TEC_IMAGE_RESOURCE_" + prefix);
	// 	image_enum_names.push("\"TEC_IMAGE_RESOURCE_" + prefix + "\"");

	// 	const prefix_no_source = path.resolve("Sources", file.name);
	// 	console.log(prefix_no_source);
	// 	image_paths.push("\"" + prefix_no_source + "\"");
	// }

	outwrite += gen_push_line("/*");
	outwrite += gen_push_line("	NOTE: THIS FILE IS AUTOGENERATED VIA KMAKE");
	outwrite += gen_push_line("	THIS FILE SHOULD NOT BE EDITED MANUALLY");
	outwrite += gen_push_line("");
	outwrite += gen_push_line("	List of all image resources(.png, .k) located in the assets/images directory");
	outwrite += gen_push_line("	Generated at: " + new Date().toLocaleString());
	outwrite += gen_push_line("*/");
	outwrite += gen_push_line("");
	outwrite += gen_push_line("#pragma once");
	outwrite += gen_push_line("");
	outwrite += gen_push_line("enum");
	outwrite += gen_push_line("{");
	for (const elem of image_enums)
	{
		outwrite += gen_push_line("\t" + elem + ",");
	}
	outwrite += gen_push_line("");
	outwrite += gen_push_line("	TEC_IMAGE_RESOURCES_MAXIMUM_COUNT");
	outwrite += gen_push_line("}");
	outwrite += gen_push_line("tec_image_resources_e;");
	outwrite += gen_push_line("");
	outwrite += gen_push_line("static char const * tec_image_resources_enum_names[] = {");
	for (const elem of image_enum_names)
	{
		outwrite += gen_push_line("\t" + elem + ",");
	}
	outwrite += gen_push_line("");
	outwrite += gen_push_line("};");
	outwrite += gen_push_line("");
	outwrite += gen_push_line("static char const * global_image_resources_paths[] = {");
	for (const elem of image_paths)
	{
		outwrite += gen_push_line("\t" + elem + ",");
	}
	outwrite += gen_push_line("};");
	outwrite += gen_push_line("");

	//Now, we want to generate the appropriate directory + asset name here, including filetype

	fs.writeFileSync("Sources/assets/image_resources.h", outwrite);
}


let project = new Project('Tectonic');
project.addFile('Sources/**');
project.addFiles('Sources/shaders/**');
project.addFiles('Sources/assets/**');
project.addIncludeDir('Sources');
project.setDebugDir('Deployment');
project.addDefine('TEC_LOG_LOGGING_ENABLED=1');

resolve(project);

//Possible flags are:
//TEC_DISABLE_UNFORCED_ASSERTS to disable any non-mandatory assertions
//TEC_DISABLE_TESTS to disable the runtime tests launched before main