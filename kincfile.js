const fs = require('fs');

function gen_push_line(append) {
	return append + "\n";
}

function get_all_subdirectories(path_inc)
{
	let files = fs.readdirSync(path_inc, {withFileTypes: true});
	let directories = files.filter(file => file.isDirectory());
	let all_directories = [];
	if (directories.length > 0)
	{
		for (const directory of directories)
		{	
			all_directories.push("" + path_inc + directory.name + "/");
			all_directories = all_directories.concat(get_all_subdirectories(path_inc + directory.name + "/"));
		}
	}
	return all_directories;
}

//We'll use this format to write out all of our assets to file
//Same thing for sound, music, etc. 
//We'll need to expand this to handle recursive directories in images and sounds and such, maybe
if (fs.existsSync("Sources/assets/images/"))
{
	let files = fs.readdirSync("Sources/assets/images/", {withFileTypes: true});
	let dirs_to_iterate = get_all_subdirectories("Sources/assets/images/");

	for (const dir of dirs_to_iterate)
	{
		files = files.concat(fs.readdirSync(dir, {withFileTypes: true}));
	}
	let image_enums = [];
	let image_enum_names = [];
	let outwrite = "";

	//Note: We should store the directory of the asset here too, so that we can store in a look up table something like
	//"assets/images/car/part1.png" for the full address
	for (const file of files)
	{
		if (file.isFile() && (file.name.endsWith(".png") | file.name.endsWith(".k")))
		{
			//TODO(zshoals): We can split with the Source/assets/--type-- string, then take part 2, then
			//replace slashes with underscores, capitalize, split off filetype
			//tomorrow I'm tired :(  
			const prefix = file.name.split(".")[0].toUpperCase();
			image_enums.push("TEC_IMAGE_RESOURCE_" + prefix);
			image_enum_names.push("\"TEC_IMAGE_RESOURCE_" + prefix + "\"");
		}
	}

	for (const elem of dirs_to_iterate)
	{
		outwrite += gen_push_line(elem);
	}
	outwrite += gen_push_line("/*");
	outwrite += gen_push_line("	NOTE: THIS FILE IS AUTOGENERATED VIA KMAKE");
	outwrite += gen_push_line("	THIS FILE SHOULD NOT BE EDITED MANUALLY");
	outwrite += gen_push_line("");
	outwrite += gen_push_line("	List of all image resources(.png, .k) located in the assets/images directory");
	outwrite += gen_push_line("	Generated at: " + new Date().toLocaleString());
	outwrite += gen_push_line("*/");
	outwrite += gen_push_line("");
	outwrite += gen_push_line("#pragma once");
	outwrite += gen_push_line("");
	outwrite += gen_push_line("enum");
	outwrite += gen_push_line("{");
	for (const elem of image_enums)
	{
		outwrite += gen_push_line("\t" + elem + ",");
	}
	outwrite += gen_push_line("	TEC_IMAGE_RESOURCES_MAXIMUM_COUNT");
	outwrite += gen_push_line("}");
	outwrite += gen_push_line("tec_image_resources_e;");
	outwrite += gen_push_line("");
	outwrite += gen_push_line("static char const * tec_image_resources_enum_names[] = {");
	for (const elem of image_enum_names)
	{
		outwrite += gen_push_line("\t" + elem + ",");
	}
	outwrite += gen_push_line("");
	outwrite += gen_push_line("};");

	//Now, we want to generate the appropriate directory + asset name here, including filetype

	fs.writeFileSync("Sources/assets/image_resources.h", outwrite);
}


let project = new Project('Tectonic');
project.addFile('Sources/**');
project.addFiles('Sources/shaders/**');
project.addFiles('Sources/assets/**');
project.addIncludeDir('Sources');
project.setDebugDir('Deployment');
project.addDefine('TEC_LOG_LOGGING_ENABLED=1');

resolve(project);

//Possible flags are:
//TEC_DISABLE_UNFORCED_ASSERTS to disable any non-mandatory assertions
//TEC_DISABLE_TESTS to disable the runtime tests launched before main