const fs = require('fs');


//We'll use this format to write out all of our assets to file
//Same thing for sound, music, etc. 
//We'll need to expand this to handle recursive directories in images and sounds and such, maybe
if (fs.existsSync("Sources/assets/"))
{
	let files = fs.readdirSync("Sources/assets/", {withFileTypes: true});
	let image_enums = [];
	let image_enum_names = [];
	//Note: We should store the directory of the asset here too, so that we can store in a look up table something like
	//"assets/images/car/part1.png" for the full address
	for (const file of files)
	{
		if (file.isFile() && (file.name.endsWith(".png") | file.name.endsWith(".k")))
		{
			const prefix = file.name.split(".")[0].toUpperCase();
			image_enums.push("TEC_IMAGE_RESOURCE_" + prefix);
			image_enum_names.push("\"TEC_IMAGE_RESOURCE_" + prefix + "\"");
		}
	}

	let outwrite = `
/*
	NOTE: THIS FILE IS AUTOGENERATED VIA KMAKE
	THIS FILE SHOULD NOT BE EDITED MANUALLY
*/

#pragma once

enum
{
`
	for (elem of image_enums)
	{
		outwrite += "\t" + elem + ",\n";
	}

	outwrite += `
	TEC_IMAGE_RESOURCE_MAXIMUM_COUNT
}
tec_image_resources_e;

static char const * global_image_resources_enum_names[] = {
`

	for (elem of image_enum_names)
	{
		outwrite += "\t" + elem + ",\n";
	}

	outwrite += `
};`

	fs.writeFileSync("Sources/assets/image_resources.h", outwrite);
}


let project = new Project('Tectonic');
project.addFile('Sources/**');
project.addFiles('Sources/shaders/**');
project.addFiles('Sources/assets/**');
project.addIncludeDir('Sources');
project.setDebugDir('Deployment');
project.addDefine('TEC_LOG_LOGGING_ENABLED=1');

resolve(project);

//Possible flags are:
//TEC_DISABLE_UNFORCED_ASSERTS to disable any non-mandatory assertions
//TEC_DISABLE_TESTS to disable the runtime tests launched before main